" This is a file for custom key bindings.

" C-d is "Delete"
inoremap <C-d> <Del>

" C-a is "Go to beginning of row"
inoremap <C-a> <Esc>I

" C-e is "Go to last of row"
inoremap <C-e> <Esc>A

" Move by physical line
nnoremap j gj
nnoremap k gk

" Insert closing braces
fun! CloseBraces()
    " Don't do this for LaTeX documents
    if &filetype !~ 'tex\|plaintex'
        inoremap {<CR> {<CR>}<Esc>O
        " inoremap {{<CR> {{<CR>}};<Esc>O
    endif
endfun
autocmd FileType * call CloseBraces()

" Move pwd to directory of buffer
nnoremap <silent><Leader>cd :cd %:h<CR>

" Save as super user
nnoremap <Leader>ws :w sudo:%<CR>
nnoremap <Leader>xs :x sudo:%<CR>
nnoremap <Leader>es :e sudo:%<CR>

" vim-altr
nmap <Leader>a <Plug>(altr-forward)
nmap <Leader>A <Plug>(altr-back)

" Use wandbox for quickrun
nnoremap <Leader>wb :QuickRun -runner wandbox<CR>
" make
nnoremap <Leader>m :QuickRun make<CR>

" rails.vim used to have a Rtree command
command Rtree NERDTreeFind

" Map K to ref.vim
nmap K <Plug>(ref-keyword)

" snippet
augroup cpp-namespace
    autocmd!
    autocmd FileType cpp inoremap <buffer><expr>; <SID>expand_namespace()
augroup END
function! s:expand_namespace()
    let s = getline('.')[0:col('.')-1]
    if s =~# '\<b;$'
        return "\<BS>oost::"
    elseif s =~# '\<s;$'
        return "\<BS>td::"
    elseif s =~# '\<d;$'
        return "\<BS>etail::"
    else
        return ';'
    endif
endfunction
