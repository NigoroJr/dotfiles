snippet		main
	int main(int argc, char const* argv[]) {${0:TARGET}
		return 0;
	}

snippet		inc
	#include <${1:iostream}>${0}

snippet		incl
	#include "${1}"${0}

snippet		pl
	std::cout << ${1} << std::endl;${0}

snippet		cout
	std::cout << ${0}

snippet		endl
	std::endl;${0}

snippet		class
	class ${1:Name} {
	public:
		${0}
	};

snippet		cpp
options		head
	#include <algorithm>
	#include <chrono>
	#include <functional>
	#include <iostream>
	#include <iterator>
	#include <memory>
	#include <string>
	#include <thread>
	#include <type_traits>
	#include <unordered_map>
	#include <utility>
	#include <vector>

	int main(const int argc, char const* argv[]) {${0}

		return 0;
	}

# Hello World
snippet		hello
abbr		hello_world
options		head
	#include <iostream>

	int main(const int argc, char const *argv[]) {
		${1:std::cout << "Hello, World!" << std::endl;}

		return 0;
	}

snippet		param
abbr		\param[in] param desc
	\param[${1:in}] ${2:param} ${3:description}

snippet		operator_prototype
abbr		operator overload prototype
options		head
	${1:Foo&} operator${2:=}(${3:const Foo& other});${0}

snippet		operator
abbr		operator overload
options		head
	${1:Foo&} ${2:Foo::}operator${3:=}(${4:const Foo& other}) {
		${0}
	}

snippet		template
abbr		template<typename T>
	template<typename ${1:T}>${0}

snippet		class_full
abbr		class declaration
options		head
	class ${1:Foo} ${0}{
	public:
		// Default constructor
		$1() {}
		// Copy constructor
		$1(const $1& ${3:other}) ${4:#init member vars} {}
		// Move constructor
		$1(const $1&& ${5:other}) ${6:#init member vars} {}
		// Destructor
		~$1() {}

		// Assignment operator
		$1& operator=(const $1& ${7:other}) {
			${8:#assignments}
			return *this;
		}

	private:
		${2:#member vars}
	};

snippet		operator<<
abbr		operator<<
alias		stream_insertion
options		word
	std::ostream& operator<<(std::ostream& ${1:os}, const ${2:Foo}& ${3:f})${0}
