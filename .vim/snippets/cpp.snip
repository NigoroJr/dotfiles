snippet		main
	int main(int argc, char const* argv[]) {${0}
		return 0;
	}

snippet		incl
	#include "${1}"${0}

snippet		class_short
	class ${1:Name} {
	public:
		${0}
	};

snippet		cpp
abbr		Include headers
options		head
	#include <algorithm>
	#include <chrono>
	#include <functional>
	#include <iomanip>
	#include <iostream>
	#include <iterator>
	#include <map>
	#include <memory>
	#include <numeric>
	#include <set>
	#include <sstream>
	#include <string>
	#include <thread>
	#include <tuple>
	#include <type_traits>
	#include <unordered_map>
	#include <utility>
	#include <vector>

	int main(const int argc, char* const argv[]) {${0}

		return 0;
	}

snippet		hello
abbr		hello_world
options		head
	#include <iostream>

	int main(const int argc, char* const argv[]) {
	${0}
		return 0;
	}

snippet		param
abbr		\param[in] param desc
	\param[${1:in}] ${2:param} ${3:description}

snippet		operator
abbr		operator overload
options		head
	${1:Foo&} ${2:Foo::}operator${3:=}(${4:const Foo& other})${0}

snippet		template
abbr		template<typename T>
	template<typename ${1:T}>${0}

snippet		class_quick
abbr		quick class declaration
options		head
	class ${1:Foo} ${0}{
	public:
		/* Constructors, Destructor, and Assignment operator {{{ */
		// Default constructor
		$1() { }

		// Copy constructor
		$1(const $1& other)
			${3:#init member vars}
		{ }

		// Move constructor
		$1($1&& other)
			${4:#init member vars}
		{ }

		// Destructor
		~$1() { }

		// Assignment operator
		$1& operator=(const $1& other) {
			${5:#assignments}
			return *this;
		}

		// Move assignment operator
		$1& operator=($1&& other) {
			${6:#assignments}
			return *this;
		}
		/* }}} */

	private:
		${2:#member vars}
	};

snippet		class_declaration
abbr		class declaration
alias		class
options		head
	class ${1:Foo} ${0}{
	public:
		/* Constructors, Destructor, and Assignment operators {{{ */
		// Default constructor
		$1();

		// Copy constructor
		$1(const $1& other);

		// Move constructor
		$1($1&& other);

		// Destructor
		~$1();

		// Assignment operator
		$1& operator=(const $1& other);

		// Move assignment operator
		$1& operator=($1&& other);
		/* }}} */

	private:
		${2:#member vars}
	};

snippet		class_definition
abbr		class definition
options		head
	/* Constructors, Destructor, and Assignment operators {{{ */
	// Default constructor
	$1::${1:#class name}()
		${2: #initializations}
	{ }

	// Copy constructor
	$1::$1(const $1& other)
		${3: #initializations}
	{ }

	// Move constructor
	$1::$1($1&& other)
		${4: #initializations}
	{ }

	// Destructor
	$1::~$1()
		${5: #initializations}
	{ }

	// Assignment operator
	$1& $1::operator=(const $1& other) {
		${6}
		return *this;
	}

	// Move assignment operator
	$1& $1::operator=($1&& other) {
		${7}
		return *this;
	}
	/* }}} */

snippet		operator==
abbr		operator==
alias		equality_operator
options		word
	bool operator${1:==}(const ${2:Foo}& ${3:other}) ${4:const}${0}

snippet		operator<<
abbr		operator<<
alias		stream_insertion
options		word
	std::ostream& operator<<(std::ostream& ${1:os}, const ${2:Foo}& ${3:f})${0}

snippet     switch
abbr        switch-case
options     head
	switch (${1:#var}) {
		case ${2:#val}:
			${0}
			break;
	}

snippet		dump
abbr		std::copy(v.begin(), v.end(), std::ostream_iterator<>)
options		head
	std::copy(${1:v}.begin(), $1.end(), std::ostream_iterator<${2:int}>(${3:std::cout}, ${4:" "}));${0}

snippet		begin-end
abbr		begin-end
options		word
    ${1:#container}.begin(), $1.end()${0}

snippet		vector
abbr		std::vector
alias		`vec
options		word
	std::vector<${1:int}>${0}
