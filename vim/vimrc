" Don't go further if feature size is tiny or small
if 0 | endif

let g:neobundle_rtp = expand('~/.vim/bundle/neobundle.vim')

" Setup runtimepath on start {{{
if has('vim_starting')
  set nocompatible
  execute 'set runtimepath+=' . g:neobundle_rtp
endif
" }}}
" Function to check current Vim's version {{{
function! HasVersion(ver_str)
  let split_version = split(a:ver_str, '\.')
  let major = get(split_version, 0, 0)
  let minor = get(split_version, 1, 0)
  let patch = get(split_version, 2, 0)

  let min_version = major * 100 + minor
  return v:version > min_version ||
        \ (patch != 0 && v:version == min_version && has('patch'.patch))
endfunction
" }}}
set backup
set backupdir=~/.vim/backups/
set viewdir=~/.vim/view/
" Persistent undo requires Vim 7.3+
if HasVersion('7.3')
  set undodir=~/.vim/undo/
  set undofile
endif
set tabstop=4
set softtabstop=4
set expandtab
set shiftwidth=4
set shiftround
set textwidth=78
set number
set wildmode=longest,list
set foldenable
set foldmethod=marker
set viewoptions=cursor,folds
set fileencodings=ucs-bom,utf-8,iso-2022-jp,sjis,cp932,euc-jp,cp20932,guess
set splitright
set splitbelow
set modeline
set completeopt-=preview
set autoread
set showtabline=0
set formatoptions+=nmB
set updatetime=500
" Remove comment leaders with 'J'
if HasVersion('7.3.541')
  set formatoptions+=j
endif
set formatlistpat=^\\s*\\(\\d\\+[\\]:.)}\\t\ ]\\\|[*+-]\\)\\s*
let mapleader = ','
noremap \ ,
syntax on

" Global variables {{{
let g:use_rsense = 0
let g:rsenseHome = expand('~/.vim/bundle/rsense')
let g:show_startup_time = 1
let g:case_insensitive_cmd = 0
" Disable netrw
let g:loaded_netrwPlugin = 1
let g:disable_color_coded = 1
" }}}
" Measure startup time in milliseconds {{{
if exists('g:show_startup_time') && g:show_startup_time
      \ && has('vim_starting') && has('reltime')
  function! s:show_elapsed_millisec(start) abort
    if &filetype == 'man'
      return
    endif

    let duration = str2float(reltimestr(reltime(a:start)))
    let duration = duration * 1000
    echomsg string(duration)
  endfunction

  let s:start = reltime()
  autocmd VimEnter * call s:show_elapsed_millisec(s:start)
endif
" }}}
" Recompile .zshrc etc. on save {{{
function! s:recompile_zshrc(filename) abort
  " zcompile is a built-in shell command so isn't detected with executable()
  if !executable('zsh') || !filereadable(a:filename)
    return
  endif

  call system('zcompile '.a:filename)
endfunction
" }}}
" Filetype-specific text properties {{{
autocmd FileType text,vimshell setlocal textwidth=0
autocmd FileType ruby,html,xhtml,eruby,vim,toml,xml setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType python,scss setlocal shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType go setlocal noexpandtab
autocmd FileType man setlocal nonumber noexpandtab shiftwidth=8 tabstop=8 softtabstop=8
autocmd FileType help syntax clear helpNote
autocmd BufWritePost .zsh* call s:recompile_zshrc(expand('%'))
" }}}
" General key bindings   {{{
" Double leader
nnoremap <D_Leader> <Nop>
nmap <Leader><Leader> <D_Leader>
" Move by physical/logical line
nnoremap gj j
nnoremap gk k
nnoremap j gj
nnoremap k gk

" More powerful ex command history
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
" Shell key bindings in ex mode
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
" NOTE: Meta keys do not work in terminal Vim
cnoremap <M-f> <S-Right>
cnoremap <M-b> <S-Left>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-g> <C-c>

" Use modifiers for substitution
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" Save as super user
nnoremap <Leader>ws :w sudo:%<CR>
nnoremap <Leader>xs :x sudo:%<CR>
au BufWriteCmd  sudo:*,sudo:*/* SudoWrite <afile>
au FileWriteCmd sudo:*,sudo:*/* SudoWrite <afile>

" Reset highlight search by pressing Escape 2 times
nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>

" Move pwd to directory of buffer
nnoremap <silent> <Leader>cdc :cd %:h<CR>
nnoremap <silent> <Leader>cdl :lcd %:h<CR>

" Q to quit (overrides 'Q', but this is the same as 'gq')
nmap <silent> Q :q<CR>

" Key bindings for tab operations
" Go to specefic tab
function! s:goto_tab() abort
  let tab_num = nr2char(getchar())
  silent exec ':tabnext '.tab_num
endfunction
nnoremap [tab] <Nop>
nmap <Leader>t [tab]
nnoremap <silent> [tab]g :call <SID>goto_tab()<CR>
nnoremap <silent> [tab]s :tabs<CR>
nnoremap <silent> [tab]n :tabnext<CR>
nnoremap <silent> [tab]p :tabprevious<CR>
nnoremap <silent> [tab]f :tabfirst<CR>
nnoremap <silent> [tab]l :tablast<CR>
nnoremap <silent> [tab]c :tabnew<CR>

" Function to toggle variables and show message
function! s:toggle(var, mes) abort
  silent exec 'setlocal '.a:var.'!'
  echo a:mes.' '.(eval('&'.a:var) ? 'ON' : 'OFF')
endfunction

nmap <silent> <Leader>ss :call <SID>toggle('spell', 'Spell')<CR>
nmap <silent> <Leader>sp :call <SID>toggle('paste', 'Paste')<CR>
nmap <silent> <Leader>sb :call <SID>toggle('scrollbind', 'Scrollbind')<CR>
nmap <silent> <Leader>set :call <SID>toggle('expandtab', 'expandtab')<CR>
nmap <silent> <Leader>sw :call <SID>toggle('wrap', 'wrap')<CR>

" Toggle diff
function! s:toggle_diff() abort
  if &diff
    diffoff
  else
    diffthis
  endif
  echo 'Diff '.(&diff ? 'ON' : 'OFF')
endfunction
" Note that <Leader>sd is mapped to surround.vim <Plug>Dsurround
nmap <silent> <Leader>dt :call <SID>toggle_diff()<CR>
" }}}
" Case-sensitive search, case-insensitive command completion  {{{
if exists('g:case_insensitive_cmd') && g:case_insensitive_cmd
  nnoremap : :call IgnoreCase()<CR>:
  function! IgnoreCase()
    set ignorecase
  endfunction
  nnoremap / :call NoIgnoreCase()<CR>/
  function! NoIgnoreCase()
    set noignorecase
  endfunction
endif
" }}}
" Mapping for inserting closing curly brace {{{
function! s:closing_brace_mapping()
  if &filetype == 'vim'
    inoremap <buffer> {<CR> {<CR>\<Space>}<Esc>O\<Space>
  " Don't do this for LaTeX documents
  elseif &filetype !~ 'tex\|plaintex'
    inoremap <buffer> {<CR> {<CR>}<Esc>O
  endif
  " Otherwise, no mapping is done
endfun
autocmd FileType * call <SID>closing_brace_mapping()
" }}}
" Create backup view, and undo directories {{{
if !isdirectory(expand(&backupdir))
  call mkdir(&backupdir)
endif
if !isdirectory(expand(&viewdir))
  call mkdir(&viewdir)
endif
if !isdirectory(expand(&undodir)) && HasVersion('7.3')
  call mkdir(&undodir)
endif
" }}}
" Set filetypes to not save/load the view {{{
autocmd FileType gitcommit autocmd! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])
let no_view = ['gitcommit', 'tex', 'plaintex']
augroup vimrc
  autocmd BufWritePost *
        \   if expand('%') != '' && &buftype !~ 'nofile' && index(no_view, &filetype) == -1
        \|      mkview!
        \|  endif
  autocmd BufRead *
        \   if expand('%') != '' && &buftype !~ 'nofile' && index(no_view, &filetype) == -1
        \|      silent loadview
        \|  endif
augroup END
" }}}
" Make scripts executable if it's a script {{{
function! s:make_executable(filename)
  " Don't change permissions in a git repo
  call system('git status')
  let exit_status = v:shell_error
  if exit_status == 0
    return
  endif

  let line = getline(1)
  if line =~ '^#!' && line =~ '/bin'
    execute 'silent !chmod a+x' a:filename
    filetype detect
  endif
endfunction
autocmd BufWritePost * call s:make_executable(@%)
" }}}
" Underline {{{
function! s:underline(chars)
  let view = winsaveview()

  let chars = empty(a:chars) ? '-' : a:chars
  let nr_columns = virtcol('$') - 1
  let uline = repeat(chars, (nr_columns / len(chars)) + 1)
  put =strpart(uline, 0, nr_columns)

  call winrestview(view)
endfunction
command! -nargs=? UnderlineCurrentLine call s:underline(<q-args>)
" }}}

" Clone neobundle.vim if not installed {{{
if !isdirectory(g:neobundle_rtp) && executable('git')
  let url = 'https://github.com/Shougo/neobundle.vim'
  let cmd = 'git clone ' . url . ' ' . g:neobundle_rtp
  call system(cmd)
endif
" }}}
" Init neobundle.vim {{{
call neobundle#begin(expand('~/.vim/bundle/'))

" Names to manually load and source
let s:manually_load = [
      \ 'oldvim',
      \ 'neovim',
      \ ]
let s:rc_prefix = expand('~/.vim/rc')
let s:rc_names = split(globpath(s:rc_prefix, '*.vim'), '\n')
call map(s:rc_names, 'fnamemodify(v:val, ":t:r")')
" Ignore plugins to manually load and source
call filter(s:rc_names, 'index(s:manually_load, v:val) == -1')
if neobundle#load_cache()
  for name in s:rc_names
    let toml_path = printf('%s/toml/%s.toml', s:rc_prefix, name)
    call neobundle#load_toml(toml_path)
  endfor

  if has('nvim')
    call neobundle#load_toml(s:rc_prefix . '/toml/neovim.toml')
  else
    call neobundle#load_toml(s:rc_prefix . '/toml/oldvim.toml')
  endif

  NeoBundleSaveCache
endif

call neobundle#local(expand('~/src/local_plugins'))

call neobundle#end()
filetype plugin indent on
if has('vim_starting')
  NeoBundleCheck
endif
" }}}

" Configurations for individual plugins {{{
for name in s:rc_names
  let path = printf('%s/%s.vim', s:rc_prefix, name)
  execute 'source ' . path
endfor

if has('nvim')
  execute 'source ' . s:rc_prefix . '/neovim.vim'
else
  execute 'source ' . s:rc_prefix . '/oldvim.vim'
endif
" }}}

" Source local configurations if any {{{
if filereadable(expand('~/.localrc/vimrc'))
  source ~/.localrc/vimrc
endif
" }}}
