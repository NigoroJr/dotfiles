snippet		argparse
abbr		argparse
options		head
	import argparse


	def parse_args():
		description = "${1}"
		parser = argparse.ArgumentParser(
			description=description,
			add_help=False,
		)
		parser.add_argument(
			"-h", "--help",
			action="help",
			help="show this help message and exit",
		)${0}

		args = parser.parse_args()
		return args

snippet		add_argument
abbr		add_argument
options		head
	parser.add_argument(
		"${1:arg}",
		default="${2:val}",
		nargs=${3:"?"},
		help="${4:stuff}"
	)

snippet		add_argument_full
abbr		add_argument
options		head
	parser.add_argument(
		"${1:short}", "${2:long}",
		dest="${3:val}",
		default="${4:val}",
		type=${5:int},
		action="${6:store}",
		nargs=${7:"?"},
		metavar="${8:FOO}",
		help="${9:stuff}"
	)

snippet		seaborn
abbr		seaborn
options		head
	import numpy as np
	import pandas as pd
	import matplotlib.pyplot as plt
	import seaborn as sns

	sns.set(style="darkgrid")

	${0}

snippet		main
abbr		main
options		head
	def main():
		pass${0}


	if __name__ == "__main__":
		main()

snippet		roslaunch
abbr		launch
options		head
	from launch import LaunchDescription
	from launch_ros.actions import Node


	def generate_launch_description():
		return LaunchDescription(
			[
				Node(
					name="${3}",
					package="${1}",
					executable="${2}",
				),${0}
			]
		)

snippet		roslaunch-node
abbr		launch-node
options		head
	Node(
		namespace="${4}",
		name="${3}",
		package="${1}",
		executable="${2}",
		remappings=[
			("${5:/from}", "${6:/to}"),
		],
	),${0}
