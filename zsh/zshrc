# Get zplug if it doesn't exist
export ZPLUG_HOME=~/.zplug
if [ ! -f $ZPLUG_HOME/zplug ]; then
    if hash curl 2>/dev/null; then
        curl -fLo $ZPLUG_HOME/zplug --create-dirs https://git.io/zplug
    elif hash wget 2>/dev/null; then
        if [ ! -d $ZPLUG_HOME ]; then
            mkdir -p $ZPLUG_HOME
        fi
        wget https://git.io/zplug -O $ZPLUG_HOME/zplug
    else
        echo "Couldn't download zplug" 1>&2
        return 1
    fi
fi

source ~/.zplug/zplug
zplug 'b4b4r07/zplug'

# Completions (load after compinit with niceness >= 10)
zplug 'plugins/golang', \
    from:oh-my-zsh, \
    nice:10

zplug 'knu/z', \
    of:'z.sh', \
    nice:10

zplug 'zsh-users/zaw'

zplug 'Tarrasch/zsh-bd'

if ! zplug check; then
    printf "Install plugins? [y/N] "
    if read -q; then
        echo
        zplug install
    else
        echo
    fi
fi

zplug load

# zaw
zstyle ':filter-select' max-lines 20
zstyle ':filter-select' extended-search yes
zstyle ':filter-select' case-insensitive yes
zstyle ':filter-select' rotate-list yes

# Read aliases
if [ -f ~/.aliases ]; then
    source ~/.aliases
fi

# Compile .zshrc if necessary
if [ ! -f ~/.zshrc.zwc -o ~/.zshrc -nt ~/.zshrc.zwc ]; then
    zcompile ~/.zshrc
fi

# Colors {{{
set_colors() {
    eval $( dircolors )
    export ZLS_COLORS=$LS_COLORS
    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
}

case $( uname -s ) in
    Darwin)
        if hash brew 2>/dev/null; then
            gnubin=$(brew --prefix coreutils)/libexec/gnubin
            export PATH=$gnubin:$PATH

            if hash dircolors 2>/dev/null; then
                set_colors
            fi
        else
            # Use GNU ls if available
            if hash gls 2>/dev/null; then
                alias ls='gls'
            else
                alias ls='ls -G'
            fi
        fi
        ;;
    *)
        set_colors
        ;;
esac
# }}}

# In tmux, don't show status bar if there's only one window
if [[ -n $TMUX ]]; then
    if [ $(tmux list-windows | wc -l) -eq 1 ]; then
        tmux set-option status off >/dev/null
    else
        tmux set-option status on >/dev/null
    fi
fi

# enable cursor selection
zstyle ':completion:*:default' menu select=1
zstyle ':completion:*:(processes|jobs)' menu yes select=2

# Limit Coredump size
limit coredumpsize 102400

# Options {{{
setopt auto_cd              # cd when only directory is entered
setopt auto_list            # Show list of completion
setopt auto_name_dirs       # Use named dirs automatically
setopt auto_param_keys      # Complete variables
setopt auto_param_slash     # Complete / automatically
setopt auto_pushd
setopt auto_remove_slash    # Remove trailing / automatically
setopt auto_resume          # Resume when suspended command is entered
setopt cdable_vars          # cd to named dirs without ~ at beginning
setopt correct              # Suggest correction
setopt extended_glob
autoload -U is-at-least
is-at-least 5.2 && setopt glob_star_short
setopt hist_ignore_all_dups
setopt hist_ignore_space    # Don't add commands that start with space
setopt hist_reduce_blanks
setopt hist_save_no_dups    # Add only last command on duplicate
setopt hist_verify          # Edit before running history
setopt list_packed          # Compact list
setopt list_types           # Show file types
setopt long_list_jobs       # Set jobs -l as the output for jobs
setopt magic_equal_subst    # Completion like --prefix=/usr etc.
setopt no_beep
setopt no_flow_control      # C-s for incremental forward search
setopt no_nomatch           # Allow things like HEAD^^ in Git repositories
setopt numeric_glob_sort
setopt prompt_subst
setopt pushd_ignore_dups    # Don't pushd the same directory
setopt share_history
unsetopt auto_menu          # Don't change completion with Tab
unsetopt prompt_cr          # Show lines without trailing \n
# }}}

# Key bindings {{{
# emacs keybinding
bindkey -e
bindkey -M emacs "\en" down-line-or-history
bindkey -M emacs "\ep" up-line-or-history

# Better history search
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey '^P' history-beginning-search-backward-end
bindkey '^N' history-beginning-search-forward-end

# Incremental backward search starting from previously executed command {{{
history-incremental-pattern-search-backward-start-from-previous() {
    CMD=$BUFFER
    zle up-history
    zle history-incremental-pattern-search-backward

    # Was aborted
    # Either works
    #if [ "$KEYS" == "" ] || [ "$KEYS" == "" ] || [ "$KEYS" == "" ]; then
    if (( #KEYS == ##\C-g )) || (( #KEYS == ##\C-c )) || (( #KEYS == ##\C-\\ )); then
        BUFFER=$CMD
    fi
}
zle -N history-incremental-pattern-search-backward-start-from-previous
# }}}

# bindkey '' history-incremental-pattern-search-backward
bindkey '^R' history-incremental-pattern-search-backward-start-from-previous
bindkey '^S' history-incremental-pattern-search-forward

bindkey -M isearch '^H' backward-kill-word
bindkey -M isearch '^R' history-incremental-pattern-search-backward

zmodload zsh/complist
# Start menu comple with Shift-Tab
bindkey "\e[Z" menu-complete
# Use Shift-Tab to reverse traverse completion list
bindkey -M menuselect "\e[Z" reverse-menu-complete

# zaw
# M-z for zaw-history
bindkey "\ez" zaw-history
# C-M-z for zaw
bindkey "\e^Z" zaw
# C-x c for zaw-command-output
bindkey '^X!' zaw-command-output
# }}}

# Settings for prompt
if [ -f ~/.zshrc_prompt ]; then
    source ~/.zshrc_prompt
fi

# Read local configs if any
if [ -f ~/.localrc/zshrc ]; then
    source ~/.localrc/zshrc
fi

# vim: foldmethod=marker ft=zsh
